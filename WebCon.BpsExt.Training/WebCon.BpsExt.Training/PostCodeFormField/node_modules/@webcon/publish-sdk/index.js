#!/usr/bin/env node

const fs = require('fs');
const archiver = require('archiver');
const chalk = require('chalk');

const CURR_DIR = process.cwd();

const addPluginToManifest = (pluginManifestPath, manifestEntry) => {
    let pluginsManifest = [];

    if (fs.existsSync(pluginManifestPath)) {
        pluginsManifest = JSON.parse(fs.readFileSync(pluginManifestPath));

        let plugin = pluginsManifest.find(plugin => plugin.Guid === manifestEntry.Guid);
        if (plugin.length === 0)
            pluginsManifest.push(manifestEntry);
        else {
            plugin.Name = manifestEntry.Name;
            plugin.Description = manifestEntry.Description;
        }
    }
    else 
        pluginsManifest.push(manifestEntry);

    fs.writeFile(pluginManifestPath, 
        JSON.stringify(pluginsManifest, null, 2), (err) => { if (err) throw err; });
}

const archiveManifest = (pluginName) => {
    if (!fs.existsSync(`${CURR_DIR}\\publish`))
        fs.mkdirSync(`${CURR_DIR}\\publish`);
    
    let output = fs.createWriteStream(`publish\\${pluginName}.zip`);
    let archive = archiver('zip');
    archive.pipe(output);
    archive.file(`${CURR_DIR}\\package\\${pluginName}.bpspkg`, { name: `${pluginName}.bpspkg` });
    archive.file(`${CURR_DIR}\\${pluginName}.json`, { name: `${pluginName}.json` });
    archive.finalize();
}

const generateManifestJSON = (pluginManifestPath, manifestEntry) => {
    addPluginToManifest(pluginManifestPath, manifestEntry);
    archiveManifest(manifestEntry.Name);
};

const createManifestEntry = () => {
    const formFieldExtensionJSManifest = fs.readFileSync(`${CURR_DIR}\\src\\manifest.json`).toString();
    const pluginGuid = JSON.parse(formFieldExtensionJSManifest).solutionId;
    const pluginName = JSON.parse(formFieldExtensionJSManifest).packageName;
    const pluginDescription = JSON.parse(formFieldExtensionJSManifest).description;
    const pluginType = "FormFieldExtension";
    const manifestEntry = { 
        Guid: pluginGuid,
        Name: pluginName, 
        Description: pluginDescription, 
        Type: pluginType, 
        BPSControl: pluginName 
    };

    return manifestEntry;
}

(async () => {
    const manifestEntry = createManifestEntry();
    const pluginManifestPath = `${CURR_DIR}\\${manifestEntry.Name}.json`;

    generateManifestJSON(pluginManifestPath, manifestEntry);
    console.log(chalk.green('The installation package has been created.'));
    console.log(`It is available in ${chalk.cyan('publish')} directory under the root of the project ${chalk.cyan(CURR_DIR)} as ${chalk.magenta(manifestEntry.Name + '.zip')}.`);
    console.log(`Now you can import the installation package in ${chalk.magenta('WEBCON BPS Designer Studio')}.`);
})();
